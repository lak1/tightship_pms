generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  users             users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model categories {
  id           String     @id
  menuId       String
  name         String
  description  String?
  displayOrder Int        @default(0)
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime
  menus        menus      @relation(fields: [menuId], references: [id], onDelete: Cascade)
  products     products[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model integrations {
  id           String            @id
  restaurantId String
  platformId   String
  credentials  Json              @db.Json
  settings     Json              @default("{}")
  status       IntegrationStatus @default(DISCONNECTED)
  lastSyncAt   DateTime?
  lastError    Json?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime
  platforms    platforms         @relation(fields: [platformId], references: [id])
  restaurants  restaurants       @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  sync_jobs    sync_jobs[]

  @@unique([restaurantId, platformId])
  @@index([restaurantId], map: "idx_integrations_restaurantid")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model menus {
  id           String       @id
  restaurantId String
  name         String
  description  String?
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime
  categories   categories[]
  restaurants  restaurants  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  products     products[]

  @@index([restaurantId], map: "idx_menus_restaurantid")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model modifier_groups {
  id                      String                    @id
  name                    String
  description             String?
  required                Boolean                   @default(false)
  multiSelect             Boolean                   @default(false)
  minSelection            Int                       @default(0)
  maxSelection            Int?
  displayOrder            Int                       @default(0)
  isActive                Boolean                   @default(true)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime
  modifiers               modifiers[]
  product_modifier_groups product_modifier_groups[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model modifiers {
  id              String          @id
  modifierGroupId String
  name            String
  description     String?
  price           Decimal         @default(0) @db.Decimal(10, 2)
  displayOrder    Int             @default(0)
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime
  modifier_groups modifier_groups @relation(fields: [modifierGroupId], references: [id], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model organizations {
  id            String         @id
  name          String
  slug          String         @unique
  settings      Json           @default("{}")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime
  restaurants   restaurants[]
  subscriptions subscriptions?
  users         users[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model platform_mappings {
  id           String    @id
  productId    String
  platformId   String
  externalId   String
  externalData Json      @default("{}")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime
  platforms    platforms @relation(fields: [platformId], references: [id])
  products     products  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, platformId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model platforms {
  id                String              @id
  name              String              @unique
  type              PlatformType
  logoUrl           String?
  settings          Json                @default("{}")
  isActive          Boolean             @default(true)
  integrations      integrations[]
  platform_mappings platform_mappings[]
  prices            prices[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model price_history {
  id           String   @id
  productId    String
  platformId   String?
  oldPrice     Decimal? @db.Decimal(10, 2)
  newPrice     Decimal  @db.Decimal(10, 2)
  changeReason String?
  changedBy    String?
  createdAt    DateTime @default(now())
  products     products @relation(fields: [productId], references: [id], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model price_rules {
  id           String      @id
  restaurantId String
  name         String
  description  String?
  conditions   Json        @db.Json
  actions      Json        @db.Json
  priority     Int         @default(0)
  isActive     Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime
  restaurants  restaurants @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model prices {
  id            String     @id
  productId     String
  platformId    String?
  price         Decimal    @db.Decimal(10, 2)
  effectiveFrom DateTime   @default(now())
  effectiveTo   DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime
  platforms     platforms? @relation(fields: [platformId], references: [id])
  products      products   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, platformId, effectiveFrom])
  @@index([productId], map: "idx_prices_productid")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model product_modifier_groups {
  id              String          @id
  productId       String
  modifierGroupId String
  displayOrder    Int             @default(0)
  createdAt       DateTime        @default(now())
  modifier_groups modifier_groups @relation(fields: [modifierGroupId], references: [id], onDelete: Cascade)
  products        products        @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, modifierGroupId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model products {
  id                      String                    @id
  menuId                  String
  categoryId              String?
  name                    String
  description             String?
  images                  String[]                  @default([])
  sku                     String?                   @unique
  barcode                 String?
  basePrice               Decimal                   @db.Decimal(10, 2)
  taxRateId               String?
  priceControl            PriceControl              @default(MANUAL)
  priceFormula            String?
  isActive                Boolean                   @default(true)
  availability            Json                      @default("{}")
  nutritionInfo           Json?                     @default("{}")
  allergens               String[]                  @default([])
  dietaryInfo             String[]                  @default([])
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime
  platform_mappings       platform_mappings[]
  price_history           price_history[]
  prices                  prices[]
  product_modifier_groups product_modifier_groups[]
  categories              categories?               @relation(fields: [categoryId], references: [id])
  menus                   menus                     @relation(fields: [menuId], references: [id], onDelete: Cascade)
  tax_rates               tax_rates?                @relation(fields: [taxRateId], references: [id])

  @@index([menuId], map: "idx_products_menuid")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model restaurants {
  id             String         @id
  organizationId String
  name           String
  address        Json?          @default("{}")
  timezone       String         @default("Europe/London")
  settings       Json           @default("{}")
  isActive       Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime
  integrations   integrations[]
  menus          menus[]
  price_rules    price_rules[]
  organizations  organizations  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  sync_jobs      sync_jobs[]

  @@index([organizationId], map: "idx_restaurants_organizationid")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model subscriptions {
  id                 String             @id
  organizationId     String             @unique
  plan               SubscriptionPlan   @default(STARTER)
  status             SubscriptionStatus @default(ACTIVE)
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean            @default(false)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime
  organizations      organizations      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model sync_jobs {
  id            String        @id
  integrationId String
  restaurantId  String
  type          SyncType
  direction     SyncDirection
  status        SyncStatus    @default(PENDING)
  progress      Json          @default("{}")
  startedAt     DateTime?
  completedAt   DateTime?
  result        Json?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  integrations  integrations  @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  restaurants   restaurants   @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model tax_rates {
  id          String     @id
  name        String
  rate        Decimal    @db.Decimal(5, 4)
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime
  products    products[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model users {
  id             String         @id
  name           String?
  email          String         @unique
  emailVerified  DateTime?
  image          String?
  role           UserRole       @default(STAFF)
  isActive       Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime
  organizationId String?
  password       String?
  Account        Account[]
  Session        Session[]
  organizations  organizations? @relation(fields: [organizationId], references: [id])

  @@index([email], map: "idx_users_email")
  @@index([organizationId], map: "idx_users_organizationid")
}

enum IntegrationStatus {
  CONNECTED
  DISCONNECTED
  ERROR
  SYNCING
}

enum PlatformType {
  DELIVERY
  POS
  WEBSITE
  DIGITAL_MENU
}

enum PriceControl {
  MANUAL
  FORMULA
  MARKET
}

enum SubscriptionPlan {
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  INCOMPLETE
}

enum SyncDirection {
  PUSH
  PULL
  BIDIRECTIONAL
}

enum SyncStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

enum SyncType {
  FULL
  INCREMENTAL
  PRICE_ONLY
}

enum UserRole {
  OWNER
  ADMIN
  MANAGER
  STAFF
}
