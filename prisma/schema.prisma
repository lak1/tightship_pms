generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  users             users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// Custom verification tokens for email verification and password resets
model verification_tokens {
  id        String   @id
  email     String
  token     String   @unique
  type      String   // 'email_verification', 'password_reset'
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  @@index([email, type])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model categories {
  id           String     @id
  menuId       String
  name         String
  description  String?
  displayOrder Int        @default(0)
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime
  menus        menus      @relation(fields: [menuId], references: [id], onDelete: Cascade)
  products     products[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model integrations {
  id           String            @id
  restaurantId String
  platformId   String
  credentials  Json              @db.Json
  settings     Json              @default("{}")
  status       IntegrationStatus @default(DISCONNECTED)
  lastSyncAt   DateTime?
  lastError    Json?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime
  platforms    platforms         @relation(fields: [platformId], references: [id])
  restaurants  restaurants       @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  sync_jobs    sync_jobs[]

  @@unique([restaurantId, platformId])
  @@index([restaurantId], map: "idx_integrations_restaurantid")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model menus {
  id           String       @id
  restaurantId String
  name         String
  description  String?
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime
  categories   categories[]
  restaurants  restaurants  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  products     products[]

  @@index([restaurantId], map: "idx_menus_restaurantid")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model modifier_groups {
  id                      String                    @id
  name                    String
  description             String?
  required                Boolean                   @default(false)
  multiSelect             Boolean                   @default(false)
  minSelection            Int                       @default(0)
  maxSelection            Int?
  displayOrder            Int                       @default(0)
  isActive                Boolean                   @default(true)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime
  modifiers               modifiers[]
  product_modifier_groups product_modifier_groups[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model modifiers {
  id              String          @id
  modifierGroupId String
  name            String
  description     String?
  price           Decimal         @default(0) @db.Decimal(10, 2)
  displayOrder    Int             @default(0)
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime
  modifier_groups modifier_groups @relation(fields: [modifierGroupId], references: [id], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model organizations {
  id            String           @id
  name          String
  slug          String           @unique
  settings      Json             @default("{}")
  createdAt     DateTime         @default(now())
  updatedAt     DateTime
  restaurants   restaurants[]
  subscriptions subscriptions?
  users         users[]
  usageTracking usage_tracking[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model platform_mappings {
  id           String    @id
  productId    String
  platformId   String
  externalId   String
  externalData Json      @default("{}")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime
  platforms    platforms @relation(fields: [platformId], references: [id])
  products     products  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, platformId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model platforms {
  id                String              @id
  name              String              @unique
  type              PlatformType
  logoUrl           String?
  settings          Json                @default("{}")
  isActive          Boolean             @default(true)
  integrations      integrations[]
  platform_mappings platform_mappings[]
  prices            prices[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model price_history {
  id           String   @id
  productId    String
  platformId   String?
  oldPrice     Decimal? @db.Decimal(10, 2)
  newPrice     Decimal  @db.Decimal(10, 2)
  changeReason String?
  changedBy    String?
  createdAt    DateTime @default(now())
  products     products @relation(fields: [productId], references: [id], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model price_rules {
  id           String      @id
  restaurantId String
  name         String
  description  String?
  conditions   Json        @db.Json
  actions      Json        @db.Json
  priority     Int         @default(0)
  isActive     Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime
  restaurants  restaurants @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model prices {
  id            String     @id
  productId     String
  platformId    String?
  price         Decimal    @db.Decimal(10, 2)
  effectiveFrom DateTime   @default(now())
  effectiveTo   DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime
  platforms     platforms? @relation(fields: [platformId], references: [id])
  products      products   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, platformId, effectiveFrom])
  @@index([productId], map: "idx_prices_productid")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model product_modifier_groups {
  id              String          @id
  productId       String
  modifierGroupId String
  displayOrder    Int             @default(0)
  createdAt       DateTime        @default(now())
  modifier_groups modifier_groups @relation(fields: [modifierGroupId], references: [id], onDelete: Cascade)
  products        products        @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, modifierGroupId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model products {
  id                      String                    @id
  menuId                  String
  categoryId              String?
  name                    String
  description             String?
  images                  String[]                  @default([])
  sku                     String?                   @unique
  barcode                 String?
  basePrice               Decimal                   @db.Decimal(10, 4)
  taxRateId               String?
  priceControl            PriceControl              @default(MANUAL)
  priceFormula            String?
  isComposite             Boolean                   @default(false)
  customPrice             Decimal?                  @db.Decimal(10, 4)
  isActive                Boolean                   @default(true)
  canBeModifier           Boolean                   @default(false)
  showOnMenu              Boolean                   @default(true)
  availability            Json                      @default("{}")
  nutritionInfo           Json?                     @default("{}")
  ingredients             String[]                  @default([])
  allergens               String[]                  @default([])
  mayContainAllergens     String[]                  @default([])
  dietaryInfo             String[]                  @default([])
  
  // Product variant system
  productType             ProductType               @default(STANDALONE)
  parentProductId         String?
  variantAttributes       Json?                     @default("{}")  // { size: "Large", color: "Red", etc }
  variantDisplayOrder     Int                       @default(0)
  
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime
  platform_mappings       platform_mappings[]
  price_history           price_history[]
  prices                  prices[]
  product_modifier_groups product_modifier_groups[]
  google_menu_mappings    google_menu_mappings[]
  categories              categories?               @relation(fields: [categoryId], references: [id])
  menus                   menus                     @relation(fields: [menuId], references: [id], onDelete: Cascade)
  tax_rates               tax_rates?                @relation(fields: [taxRateId], references: [id])
  
  // Product variant relationships
  parentProduct           products?                 @relation("ProductVariants", fields: [parentProductId], references: [id], onDelete: Cascade)
  variants                products[]                @relation("ProductVariants")
  
  // Composite product relationships
  composite_components    composite_components[]    @relation("CompositeProduct")
  component_of            composite_components[]    @relation("ComponentProduct")
  
  // Simple modifier relationships
  available_modifiers     product_simple_modifiers[] @relation("ProductModifiers")
  modifier_for_products   product_simple_modifiers[] @relation("ModifierProduct")

  @@index([menuId], map: "idx_products_menuid")
  @@index([parentProductId], map: "idx_products_parentid")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model restaurants {
  id             String         @id
  organizationId String
  name           String
  address        Json?          @default("{}")
  timezone       String         @default("Europe/London")
  settings       Json           @default("{}")
  isActive       Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime
  integrations        integrations[]
  menus               menus[]
  price_rules         price_rules[]
  organizations       organizations         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  sync_jobs           sync_jobs[]
  google_integrations google_integrations[]

  @@index([organizationId], map: "idx_restaurants_organizationid")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model subscription_plans {
  id               String             @id
  tier             SubscriptionPlan   @unique
  name             String
  description      String?
  priceMonthly     Decimal?           @db.Decimal(10, 2)
  priceYearly      Decimal?           @db.Decimal(10, 2)
  features         Json               @default("{}")
  limits           Json               @default("{}")  // { restaurants: 1, products: 100, apiCalls: 1000 }
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  subscriptions    subscriptions[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model usage_tracking {
  id             String        @id
  organizationId String
  metricType     String        // 'api_calls', 'restaurants', 'products'
  count          Int
  periodStart    DateTime
  periodEnd      DateTime
  createdAt      DateTime      @default(now())
  organizations  organizations @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, metricType, periodStart], name: "organizationId_metricType_periodStart")
  @@index([organizationId, metricType, periodStart])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model subscriptions {
  id                   String             @id
  organizationId       String             @unique
  plan                 SubscriptionPlan   @default(FREE)  // Keep old plan field temporarily
  planId               String?            // Make optional initially
  status               SubscriptionStatus @default(TRIALING)
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean            @default(false)
  stripeSubscriptionId String?
  stripeCustomerId     String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime
  organizations        organizations      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  subscriptionPlan     subscription_plans? @relation(fields: [planId], references: [id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model sync_jobs {
  id            String        @id
  integrationId String
  restaurantId  String
  type          SyncType
  direction     SyncDirection
  status        SyncStatus    @default(PENDING)
  progress      Json          @default("{}")
  startedAt     DateTime?
  completedAt   DateTime?
  result        Json?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  integrations  integrations  @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  restaurants   restaurants   @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model tax_rates {
  id          String     @id
  name        String
  rate        Decimal    @db.Decimal(5, 4)
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime
  products    products[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model users {
  id             String         @id
  name           String?
  email          String         @unique
  emailVerified  DateTime?
  image          String?
  role           UserRole       @default(STAFF)
  isActive       Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime
  organizationId String?
  password       String?
  Account        Account[]
  Session        Session[]
  organizations  organizations? @relation(fields: [organizationId], references: [id])

  @@index([email], map: "idx_users_email")
  @@index([organizationId], map: "idx_users_organizationid")
}

enum IntegrationStatus {
  CONNECTED
  DISCONNECTED
  ERROR
  SYNCING
}

enum PlatformType {
  DELIVERY
  POS
  WEBSITE
  DIGITAL_MENU
}

enum PriceControl {
  MANUAL
  FORMULA
  MARKET
}

enum ProductType {
  PARENT     // Template product (Cod, Fish & Chips)
  VARIANT    // Size/style variations (Large Cod, Small Fish & Chips)
  STANDALONE // Traditional single products
}

enum SubscriptionPlan {
  FREE
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  INCOMPLETE
  TRIALING
}

enum SyncDirection {
  PUSH
  PULL
  BIDIRECTIONAL
}

enum SyncStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

enum SyncType {
  FULL
  INCREMENTAL
  PRICE_ONLY
}

enum UserRole {
  OWNER
  ADMIN
  MANAGER
  STAFF
}

/// Google Business Profile integrations
model google_integrations {
  id                String                  @id
  restaurantId      String
  googleLocationId  String                  // Google My Business location ID
  googleAccountId   String?                 // Google account ID for API calls
  accessToken       String                  // OAuth access token (encrypted)
  refreshToken      String                  // OAuth refresh token (encrypted)
  tokenExpiresAt    DateTime                // When the access token expires
  isActive          Boolean                 @default(true)
  lastSyncAt        DateTime?               // Last successful sync timestamp
  syncStatus        GoogleSyncStatus        @default(PENDING)
  errorMessage      String?                 // Last error message if any
  autoSync          Boolean                 @default(true)  // Enable automatic syncing
  syncInterval      Int                     @default(300)   // Sync interval in seconds (5 min)
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  
  // Relations
  restaurants       restaurants             @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  syncHistory       google_sync_history[]
  menuMappings      google_menu_mappings[]
  
  @@unique([restaurantId]) // One Google integration per restaurant
  @@index([googleLocationId])
  @@index([syncStatus])
}

/// Track Google sync history and logs
model google_sync_history {
  id              String              @id
  integrationId   String
  syncType        GoogleSyncType      @default(MENU)
  status          SyncStatus
  itemsSynced     Int                 @default(0)
  totalItems      Int                 @default(0)
  startedAt       DateTime            @default(now())
  completedAt     DateTime?
  errorDetails    String?
  triggerType     SyncTriggerType     @default(MANUAL)  // What triggered this sync
  changesDetected Json?               // Details about what changed
  apiResponse     Json?               // Google API response for debugging
  createdAt       DateTime            @default(now())
  
  // Relations
  integration     google_integrations @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  
  @@index([integrationId])
  @@index([status])
  @@index([createdAt])
}

/// Map TightShip products to Google menu structure
model google_menu_mappings {
  id                    String                @id
  productId             String
  integrationId         String
  googleMenuSectionId   String?               // Maps to Google's section ID
  displayOrder          Int                   @default(0)
  isActive              Boolean               @default(true)
  includeInSync         Boolean               @default(true)    // Allow exclusion of specific items
  customName            String?               // Override product name for Google
  customDescription     String?               // Override description for Google
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  
  // Relations
  product               products              @relation(fields: [productId], references: [id], onDelete: Cascade)
  integration           google_integrations   @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  
  @@unique([productId, integrationId]) // One mapping per product per integration
  @@index([integrationId])
  @@index([isActive])
}

/// Google-specific enums
enum GoogleSyncStatus {
  PENDING
  CONNECTING
  SYNCING
  SUCCESS
  ERROR
  DISCONNECTED
  TOKEN_EXPIRED
}

enum GoogleSyncType {
  MENU
  PHOTOS
  BUSINESS_INFO
  ALL
}

enum SyncTriggerType {
  MANUAL          // User clicked "Sync Now"
  PRODUCT_UPDATE  // Product was modified
  PRICE_CHANGE    // Price was updated
  MENU_CHANGE     // Menu structure changed
  SCHEDULED       // Automatic scheduled sync
  WEBHOOK         // Triggered by external webhook
}

enum AuditAction {
  USER_CREATED
  USER_UPDATED
  USER_DELETED
  USER_ROLE_CHANGED
  USER_ACTIVATED
  USER_DEACTIVATED
  ORGANIZATION_CREATED
  ORGANIZATION_UPDATED
  ORGANIZATION_DELETED
  ORGANIZATION_SUSPENDED
  ORGANIZATION_REACTIVATED
  SUBSCRIPTION_CREATED
  SUBSCRIPTION_UPDATED
  SUBSCRIPTION_CANCELLED
  SUBSCRIPTION_UPGRADED
  SUBSCRIPTION_DOWNGRADED
  ADMIN_LOGIN
  ADMIN_LOGOUT
  SYSTEM_SETTINGS_CHANGED
  BULK_ACTION_PERFORMED
  PASSWORD_RESET_REQUESTED
  ACCOUNT_LOCKED
  ACCOUNT_UNLOCKED
  SUSPICIOUS_ACTIVITY_DETECTED
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model audit_logs {
  id         String      @id
  action     AuditAction
  actorId    String?
  actorEmail String?
  actorRole  String?
  targetId   String?
  targetType String?
  details    Json        @default("{}")
  ipAddress  String?
  userAgent  String?
  metadata   Json        @default("{}")
  timestamp  DateTime    @default(now())
  createdAt  DateTime    @default(now())
}

/// Composite products - products made up of multiple existing products
/// Example: "Cod & Chips" made from "Cod" + "Chips" products
model composite_components {
  id              String   @id
  compositeId     String   // The composite product (e.g., "Cod & Chips")
  componentId     String   // The component product (e.g., "Cod")
  quantity        Int      @default(1)
  customPrice     Decimal? @db.Decimal(10, 4) // Override component price if needed
  displayOrder    Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  composite_product products @relation("CompositeProduct", fields: [compositeId], references: [id], onDelete: Cascade)
  component_product products @relation("ComponentProduct", fields: [componentId], references: [id], onDelete: Cascade)
  
  @@unique([compositeId, componentId])
  @@index([compositeId])
  @@index([componentId])
}

/// Simple modifiers - existing products that can be added to other products
/// Example: "Vinegar" or "Curry Sauce" can be modifiers for "Chips"
model product_simple_modifiers {
  id            String   @id
  productId     String   // The main product (e.g., "Chips")
  modifierId    String   // The modifier product (e.g., "Vinegar")
  priceChange   Decimal  @default(0) @db.Decimal(10, 4) // +0.50, -0.25, 0.00 (kept for backward compatibility)
  modifierPrice Decimal? @db.Decimal(10, 4) // Custom price for this modifier relationship (overrides default)
  isActive      Boolean  @default(true)
  displayOrder  Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  product  products @relation("ProductModifiers", fields: [productId], references: [id], onDelete: Cascade)
  modifier products @relation("ModifierProduct", fields: [modifierId], references: [id], onDelete: Cascade)
  
  @@unique([productId, modifierId])
  @@index([productId])
  @@index([modifierId])
}
